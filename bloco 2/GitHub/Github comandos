//
echo "# trybe-repository" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main //Renomeia qualquer branch para "main"
git remote add origin git@github.com:flavio92ux/trybe-repository.git
git push -u origin main


//Criação e exclusão de branchs
git branch #mostra que branch você está
git branch pentágono #cria a branch pentágono
git branch -d #exclui branch

//Deletando arquivo ou pasta com Git
git rm nome_do_arquivo_ou_pasta_vazia
git rm -r pasta

//Movendo ou renomeando arquivo ou pasta com Git
git mv nome_do_arquivo_ou_pasta destino

//Mudança entre branch
git checkout nome_da_branch
git checkout -b nome_da_branch #cria e faz o checkout (mudança) de branch

//commits
git commit -am "msg" adiciona na área de stage e commita ao mesmo tempo

//comunicação com o servidor
git push -u origin features/names #sobe a branch para o github
git diff #mostra difenças entre versões
git pull #traz modificações realizadas lá no remoto para o local

//Para ver todo o histórico podemos rodar o comando log
git log
git log -p -2 //Podemos passar uma quantidade de commits que queremos olhar com o parâmetro -p.

//Alterar o nome de usuário ou email
git config --global user.name "nome do usuário"
it config --global user.email "email do usuário"

//Alterando o editor de textos usados no commit e diffs
git config --global core.editor vim

//Ignorando arquivos
//Para isso criamos um arquivo chamado .gitignore e adicionamos os nomes dos arquivos nele.

//"Baixar" um repositório
git clone link

//Baixar as últimas alterações do servidor. Quando algo estiver diferente no nosso repositório remoto (no servidor), podemos baixar para a nossa máquina com o comando pull.
git pull

//Listando o caminho do servidor
git remote -v

//Adicionando o caminho do servidor. Caso tenhamos criado o repositório localmente antes de criar no servidor, podemos adicionar o caminho com o comando set-url.
git remote set-url origin git://url

//Adicionando um arquivo
git add nome_do_arquivo

Adicionando tudo de uma vez
git commit -am "add tudo"

//Salvando as alterações. Quando adicionamos com o git add ainda não estamos persistindo os dados no histórico do Git, mas adicionando a uma área temporária onde podemos ficar levando e trazendo alterações até garantirmos que algo realmente deve ser salvo, então rodamos o git commit. Para fazer um commit, precisamos adicionar uma mensagem ao pacote, então rodamos com o parâmetro -m 
git commit -m "mensagem"

//Verificando o que foi alterado
git status

//Para saber o que exatamente aconteceu rodamos o comando git diff. Será retornada uma tela com o que foi adicionado escrito com um +. O que foi removido aparece com um -.
git diff

//Trabalhando com branches
//Listando as branches existentes
git branch

//Criando uma nova branch
git branch nome

//Criando uma nova branch e já trocando para ela
git checkout -b nome_da_nova_branch

//Deletando uma branch
git branch -d nome

//Trocando de branch
git checkout nome_da_branch_existente

//Enviando uma branch para o servidor
git push origin nome_da_branch

//Podemos mandar todas as novas branches locais para o servidor rodando:
git push --all origin

//Deletando uma branch remota. Para deletar uma branch do servidor, rodamos o comando:
git push origin :nome_da_branch

//Juntando branches. Quando trabalhamos com branches, mais cedo ou mais tarde, vamos precisar juntar as nossas alterações com a branch master. Para isso usamos o comando merge. Imagina que vamos fazer um merge da branch nome_branch na master.
git checkout master

//Revertendo alterações
//Desfazendo do stage
git reset nome_do_arquivo
git merge nome_branch

//Enviando as alterações para o servidor. Depois que finalizamos nossas alterações, fechamos nossos commits, então devemos enviar os commits para o servidor. Para isso rodamos o comando:
git push origin master

//Apagando, movendo ou renomeando arquivos ou pastas sem estragar nosso histórico Git. Quando deletamos algum arquivo, movemos de pastas, o Git fica com um histórico de deleção de arquivo e adição de outro. Para que isso não aconteça, existem comandos do Git que salvam nossas vidas, o git rm, para deletar, e git mv, para movermos coisas.

//Deletando arquivo ou pasta com Git
git rm nome_do_arquivo_ou_pasta
git rm -r pasta

//Revertendo alterações
//Desfazendo do stage
git reset nome_do_arquivo

//Para desfazer tudo podemos fazer
git reset HEAD .

//Desfazendo alterações em um arquivo para o último commit
git checkout nome_do_arquivo

//Desfazendo tudo para o último commit
git checkout .

//Desfazendo para um commit específico
git revert hash

//Desfazendo o último push
git reset --hard HEAD~1 && git push -f origin master

//Mais comandos em: https://woliveiras.com.br/posts/comandos-mais-utilizados-no-git/#Deletandoumabranchremota

